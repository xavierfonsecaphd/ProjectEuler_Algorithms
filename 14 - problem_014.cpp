#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <math.h>
/**
 * Problem 14
 * 
 * The following iterative sequence is defined for the set of positive integers:
 * 
 * 					n → n/2 (n is even)
 * 					n → 3n + 1 (n is odd)
 * 
 * Using the rule above and starting with 13, we generate the following sequence:
 * 
 * 				13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 * 
 * It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
 * Although it has not been proved yet (Collatz Problem), it is thought that all starting 
 * numbers finish at 1.
 * Which starting number, under one million, produces the longest chain?
 * 
 * NOTE: Once the chain starts the terms are allowed to go above one million.
 *
 * 
 * */

//@Author 	Xavier
//@Date		16 Oct 2013

using namespace std;

int main (int argc, char* argv[])
{	
	double numberOfTerms = 0, biggestTerm = 2, number, count = 0;
	int i = 0;
	// numbers above 300 000 000
	int stack[310] = {113383, 134379, 138367, 151177, 159487, 161439, 161535, 170075, 184489, 191335, 201569, 204015, 207551, 212649, 213103, 226766, 226767, 239231, 242159, 242303, 245985, 255113, 258207, 268758, 268759, 276734, 276735, 280575, 284137, 287003, 302354, 302355, 306023, 311327, 318974, 318975, 319655, 322878, 322879, 323070, 323071, 340150, 340151, 358345, 358847, 363239, 363455, 368978, 368979, 378043, 378849, 382670, 382671, 387311, 388719, 403138, 403139, 408030, 408031, 415102, 415103, 419839, 420863, 425298, 425299, 426206, 426207, 430505, 430761, 431899, 437307, 453532, 453533, 453534, 453535, 459035, 466991, 477793, 478462, 478463, 479483, 483591, 484318, 484319, 484606, 484607, 485887, 488167, 491970, 491971, 498687, 504057, 510226, 510227, 516414, 516415, 517191, 524287, 525159, 537516, 537517, 537518, 538271, 539419, 542959, 544041, 544859, 545183, 552295, 553468, 553469, 553470, 553471, 559785, 561150, 561151, 567065, 568274, 568275, 574006, 574007, 574347, 575865, 580967, 583079, 588543, 604708, 604709, 604710, 604713, 606847, 612046, 612047, 612967, 622654, 622655, 623295, 629759, 631295, 637057, 637948, 637949, 637950, 639310, 639311, 645756, 645757, 645758, 645759, 646140, 646141, 646142, 647849, 650889, 654571, 655359, 655961, 656415, 665067, 665215, 666111, 667375, 680300, 680301, 680302, 680303, 687871, 688553, 695067, 699049, 700487, 713575, 716689, 716690, 716691, 717694, 717695, 719225, 723945, 725387, 726478, 726479, 726910, 726911, 728831, 732251, 736393, 737956, 737957, 737958, 737961, 748031, 748201, 750831, 756086, 756087, 757698, 757699, 765340, 765341, 765342, 774622, 774623, 775787, 777435, 777438, 777439, 780391, 780735, 781951, 782335, 786431, 787739, 788583, 803871, 806276, 806277, 806278, 806283, 807407, 809129, 814439, 816060, 816061, 816062, 817289, 817775, 822139, 823783, 824187, 827391, 828443, 829087, 830204, 830205, 830206, 830207, 837799, 839678, 839679, 841726, 841727, 844647, 849409, 850596, 850597, 850598, 851227, 852412, 852413, 852414, 859719, 861009, 861010, 861011, 861521, 861522, 861523, 863798, 863799, 871451, 872761, 874614, 874615, 874619, 882815, 886207, 886555, 886953, 889833, 901119, 907064, 907066, 907068, 907069, 907070, 907071, 907611, 910271, 917161, 918070, 918071, 919451, 920559, 924907, 927211, 930043, 931999, 932065, 933982, 933983, 934943, 937599, 940479, 944639, 946943, 951433, 955585, 955586, 955587, 955591, 956924, 956925, 956926, 957631, 958966, 958967, 967182, 967183, 968636};
	memset(stack, 0, sizeof(stack));
	do
	{
		number = stack[i++];
		cout << number;
		count = 1;
		do
			{
				if (fmod(number,2) == 0)
					number /= 2;
				else number = 3 * number + 1;
				
				count ++;
			}
			while( number != 1);
			if (numberOfTerms < count){ numberOfTerms = count; biggestTerm = stack[i - 1];}
			cout << "\t[" << count << "]" << endl;
	}
	while( i < 310);
	
	cout << "Biggest Starting number: " << biggestTerm  << "\t[" << numberOfTerms << "]" << endl;
	
	return 0;
}
